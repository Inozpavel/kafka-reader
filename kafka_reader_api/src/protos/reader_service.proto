syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "Kafka.Reader.Api";
option go_package = "kafka_reader_api";

package kafka_reader_api;

service KafkaService {
  rpc ReadMessages(ReadMessages.ReadMessagesQuery) returns (stream ReadMessages.ReadMessagesQueryResponse);
  rpc ProduceMessages(ProduceMessages.ProduceMessagesCommand) returns (ProduceMessages.ProduceMessagesCommandResponse);
  rpc GetClusterMetadata(GetClusterMetadata.GetClusterMetadataQuery) returns (GetClusterMetadata.GetClusterMetadataQueryResponse);
  rpc GetTopicPartitionsWithOffsets(GetTopicPartitionsWithOffsets.GetTopicPartitionsWithOffsetsQuery) returns (GetTopicPartitionsWithOffsets.GetTopicPartitionsWithOffsetsQueryResponse);
  rpc GetTopicLags(GetTopicLags.GetTopicLagsQuery) returns (stream GetTopicLags.GetTopicLagsQueryResponse);
}

message ReadMessages {
  message ReadMessagesQuery {
    repeated string brokers = 1;
    string topic = 2;
    MessageFormatDto key_format = 3;
    MessageFormatDto body_format = 4;
    StartFromDto start_from = 5;
    ReadLimitDto limit = 6;
    ValueFilterDto body_filter = 7;
    ValueFilterDto key_filter = 8;
    SecurityProtocolDto security_protocol = 9;
  }
  message StartFromDto {
    oneof from {
      FromBeginningDto from_beginning = 1;
      FromLatestDto from_latest = 2;
      FromTodayDto from_today = 3;
      FromTimeDto from_time = 4;
    }
    message FromBeginningDto {}
    message FromLatestDto {}
    message FromTodayDto {}
    message FromTimeDto {
      google.protobuf.Timestamp day = 1;
    }
  }
  message ValueFilterDto {
    FilterKindDto filter_kind = 1;
    Condition condition = 2;
    message Condition {
      oneof condition {
        Contains contains = 1;
        NotContains not_contains = 2;
      }
    }
    message Contains {}
    message NotContains {}
  }
  message FilterKindDto {
    oneof kind {
      StringValueDto string_value = 1;
      RegexValueDto regex_value = 2;
    }
  }
  message StringValueDto {
    string value = 1;
  }
  message RegexValueDto {
    string value = 1;
  }
  message ReadLimitDto {
    oneof limit {
      NoLimitDto no_limit = 1;
      MessageCountDto message_count = 2;
      ToTimeDto to_time = 3;
    }
    message NoLimitDto {}
    message MessageCountDto {
      uint64 count = 1;
    }
    message ToTimeDto {
      google.protobuf.Timestamp time = 1;
    }
  }

  message ReadMessagesQueryResponse {
    oneof response {
      KafkaMessageDto kafka_message = 1;
      MessagesCountersDto counters = 2;
      ErrorDto broker_error = 3;
    }
  }
  message KafkaMessageDto {
    int32 partition = 1;
    int64 offset = 2;
    google.protobuf.Timestamp timestamp = 3;
    google.protobuf.StringValue key = 4;
    google.protobuf.StringValue body = 5;
    map<string, string> headers = 6;
  }
  message MessagesCountersDto {
    uint64 read_count = 1;
    uint64 returned_count = 2;
  }

}

message ProduceMessages {
  message ProduceMessagesCommand {
    repeated string brokers = 1;
    string topic = 2;
    MessageFormatDto key_format = 3;
    MessageFormatDto body_format = 4;
    SecurityProtocolDto security_protocol = 5;
    repeated ProduceMessageDto messages = 6;
  }
  message ProduceMessageDto {
    google.protobuf.Int32Value partition = 1;
    google.protobuf.StringValue key = 2;
    google.protobuf.StringValue body = 3;
    map<string, string> headers = 4;
  }
  message ProduceMessagesCommandResponse {
    repeated DeliveryResultDto delivery_results = 1;
  }

  message DeliveryResultDto {
    int32 partition = 1;
    int64 offset = 2;
    int64 error = 3;
  }
}

message MessageFormatDto {
  oneof format {
    StringFormatDto string_format = 1;
    HexFormatDto hex_format = 2;
    Base64FormatDto base64_format = 3;
    ProtoFormatDto proto_format = 4;
  }
  message StringFormatDto {}
  message Base64FormatDto {}
  message HexFormatDto {}
  message ProtoFormatDto {
    oneof decode_way {
      SingleProtoFileDto raw_proto_file = 1;
    }
    message SingleProtoFileDto {
      string message_type_name = 1;
      string file = 2;
    }
  }
}

message SecurityProtocolDto {
  oneof protocol {
    PlaintextProtocolDto plaintext = 1;
    SslProtocolDto ssl = 2;
  }
  message PlaintextProtocolDto {};
  message SslProtocolDto {};
}

message GetClusterMetadata {
  message GetClusterMetadataQuery {
    repeated string brokers = 1;
    SecurityProtocolDto security_protocol = 2;
  }

  message GetClusterMetadataQueryResponse {
    repeated KafkaBrokerMetadataDto brokers = 1;
    repeated KafkaTopicMetadataDto topics = 2;
  }
  message KafkaBrokerMetadataDto {
    string host = 1;
    uint32 port = 2;
  }
  message KafkaTopicMetadataDto {
    string topic_name = 1;
    uint32 partitions_count = 2;
  }
}

message GetTopicPartitionsWithOffsets {
  message GetTopicPartitionsWithOffsetsQuery {
    repeated string brokers = 1;
    SecurityProtocolDto security_protocol = 2;
    string topic = 3;
  }

  message GetTopicPartitionsWithOffsetsQueryResponse {
    repeated PartitionDataWatermarksDto partitions = 1;
  }
  message PartitionDataWatermarksDto {
    int32 id = 1;
    int64 min_offset = 2;
    int64 max_offset = 3;
    int64 messages_count = 5;
  }
}

message GetTopicLags {
  message GetTopicLagsQuery {
    repeated string brokers = 1;
    SecurityProtocolDto security_protocol = 2;
    string topic = 3;
    google.protobuf.StringValue group_search = 4;
  }

  message GetTopicLagsQueryResponse {
    oneof response {
      GroupLagsDto lags = 1;
      ErrorDto error = 2;
    }
  }
  message GroupLagsDto {
    repeated GroupTopicLagDto group_topic_lags = 1;
  }
  message GroupTopicLagDto {
    string group_id = 1;
    string group_state = 2;
    string topic = 3;
    repeated GroupTopicPartitionLagDto PartitionLagDto = 4;
  }
  message GroupTopicPartitionLagDto {
    int32 partition = 2;
    int64 lag = 3;
  }
}

message ErrorDto {
  string message = 1;
}
