syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "Kafka.Reader.Api";
option go_package = "kafka_reader_api";

package kafka_reader_api;

service KafkaService {
  rpc ReadMessages(ReadMessages.Request) returns (stream ReadMessages.Response);
  rpc ProduceMessages(ProduceMessages.Request) returns (ProduceMessages.Response);
}

message ReadMessages {
  message Request {
    repeated string brokers = 1;
    string topic = 2;
    MessageFormat key_format = 3;
    MessageFormat body_format = 4;
    StartFrom start_from = 5;
    ReadLimit limit = 6;
    ValueFilter body_filter = 7;
    ValueFilter key_filter = 8;
    SecurityProtocol security_protocol = 9;
  }
  message StartFrom {
    oneof from {
      FromBeginning from_beginning = 1;
      FromLatest from_latest = 2;
      FromToday from_today = 3;
      FromTime from_time = 4;
    }
    message FromBeginning {}
    message FromLatest {}
    message FromToday {}
    message FromTime {
      google.protobuf.Timestamp day = 1;
    }
  }
  message ValueFilter {
    FilterKind filter_kind = 1;
    Condition condition = 2;
    message Condition {
      oneof condition {
        Contains contains = 1;
        NotContains not_contains = 2;
      }
    }
    message Contains {}
    message NotContains {}
  }
  message FilterKind {
    oneof kind {
      StringValue string_value = 1;
      RegexValue regex_value = 2;
    }
  }
  message StringValue {
    string value = 1;
  }
  message RegexValue {
    string value = 1;
  }
  message ReadLimit {
    oneof limit {
      NoLimit no_limit = 1;
      MessageCount message_count = 2;
      ToTime to_time = 3;
    }
    message NoLimit {}
    message MessageCount {
      uint64 count = 1;
    }
    message ToTime {
      google.protobuf.Timestamp time = 1;
    }
  }

  message Response {
    oneof response {
      KafkaMessage kafka_message = 1;
      MessagesCounters counters = 2;
      BrokerError broker_error = 3;
    }
  }
  message KafkaMessage {
    int32 partition = 1;
    int64 offset = 2;
    google.protobuf.Timestamp timestamp = 3;
    google.protobuf.StringValue key = 4;
    google.protobuf.StringValue body = 5;
    map<string, string> headers = 6;
  }
  message MessagesCounters {
    uint64 read_count = 1;
    uint64 returned_count = 2;
  }
  message BrokerError {
    string message = 1;
  }
}

message ProduceMessages {
  message Request {
    repeated string brokers = 1;
    string topic = 2;
    MessageFormat key_format = 3;
    MessageFormat body_format = 4;
    SecurityProtocol security_protocol = 5;
    repeated ProduceMessage messages = 6;
  }
  message ProduceMessage {
    google.protobuf.Int32Value partition = 1;
    google.protobuf.StringValue key = 2;
    google.protobuf.StringValue body = 3;
    map<string, string> headers = 4;
  }
  message Response {
    repeated DeliveryResult delivery_results = 1;
  }

  message DeliveryResult {
    int32 partition = 1;
    int64 offset = 2;
    int64 error = 3;
  }
}

message MessageFormat {
  oneof format {
    StringFormat string_format = 1;
    HexFormat hex_format = 2;
    Base64Format base64_format = 3;
    ProtoFormat proto_format = 4;
  }
  message StringFormat {}
  message Base64Format {}
  message HexFormat {}
  message ProtoFormat {
    oneof decode_way {
      SingleProtoFile raw_proto_file = 1;
    }
    message SingleProtoFile {
      string message_type_name = 1;
      string file = 2;
    }
  }
}

message SecurityProtocol {
  oneof protocol {
    PlaintextProtocol plaintext = 1;
    SslProtocol ssl = 2;
  }
  message PlaintextProtocol {};
  message SslProtocol {};
}
